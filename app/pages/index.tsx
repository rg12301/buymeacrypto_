import type { NextPage } from "next";
import { useTypewriter } from "react-simple-typewriter";
import Head from "next/head";
import { useEffect, useState } from "react";
import {
    Chains,
    Creator,
    Currencies,
    UDResponseResolved,
    Network,
} from "../utils/types";
import network from "../data/network.json";
import { ethers } from "ethers";
import { useRouter } from "next/router";
import { useContributorContext } from "../utils/context/contributor";
import { connect } from "../utils/connectWallet";
import makeBlockie from "ethereum-blockies-base64";
import default_creator from "../data/default_creator.json";
import Link from "next/link";
import { useLoadingContext } from "../utils/context/loading";

const Home: NextPage = () => {
    const router = useRouter();
    const { text, count } = useTypewriter({
        words: ["coffee", "book", "plant"],
        loop: 0,
        typeSpeed: 250,
        delaySpeed: 2000,
        deleteSpeed: 100,
    });
    const [creator, setCreator] = useState<Creator>(default_creator);
    const [coffee, setCoffee] = useState("1");
    const [book, setBook] = useState("1");
    const [plant, setPlant] = useState("1");
    const [payIn, setPayIn] = useState<Currencies>(Currencies.USDC);
    const [chainId, setChainId] = useState<Chains>(Chains.POLYGON);
    const [continuousPayment, setContinuousPayment] = useState(false);
    const [searchUD, setSearchUD] = useState(false);
    const [searchValid, setSearchValid] = useState(false);
    const [search, setSearch] = useState("");
    const [UDDomainResolvedResult, setUDDomainResolvedResult] =
        useState<UDResponseResolved | null>(null);
    const { contributor, handleUpdateSigner } = useContributorContext();
    const { loading, setLoading } = useLoadingContext();
    const network_typed = network as Network;
    useEffect(() => {
        if (router.isReady) {
            console.log(router.query);
            const creator_from_url = router.query.creator;
            const coffee_from_url = router.query.coffee;
            const plant_from_url = router.query.plant;
            const book_from_url = router.query.book;
            if (typeof creator_from_url == "string" && creator_from_url) {
                const _creator = JSON.parse(creator_from_url) as Creator;
                setCreator(_creator);
            }
            typeof coffee_from_url == "string" &&
                coffee_from_url &&
                setCoffee(coffee_from_url);
            typeof plant_from_url == "string" &&
                plant_from_url &&
                setPlant(plant_from_url);
            typeof book_from_url == "string" &&
                book_from_url &&
                setBook(book_from_url);
            setLoading(false);
        }
    }, [router.isReady]);

    useEffect(() => {
        if (contributor) {
            setPayIn(Currencies.USDC);
            setChainId(contributor.chainId);
        }
    }, [contributor]);

    return (
        <div className="grid min-h-screen w-full grid-cols-1 items-center justify-center gap-10 text-gray-700 md:grid-cols-2 lg:grid-cols-3">
            {/* <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head> */}
            <div className="relative mx-16 flex h-full flex-col items-center justify-center gap-20">
                {contributor ? (
                    <div className="group absolute top-5 flex gap-5 py-3 px-6 opacity-20 transition-transform ease-in-out hover:opacity-100">
                        <div
                            className="h-14 w-14 cursor-pointer overflow-hidden rounded transition-transform ease-in-out group-hover:scale-110 group-hover:shadow-xl"
                            onClick={() => {
                                handleUpdateSigner(null);
                            }}
                        >
                            <img
                                src={makeBlockie(contributor.accountAddress)}
                                alt=""
                            />
                        </div>
                        <div className="flex flex-col items-center justify-center gap-2 text-xs font-medium">
                            <p className="font-mono font-semibold">
                                {`${contributor.accountAddress.substring(
                                    0,
                                    10
                                )}....${contributor.accountAddress.substring(
                                    contributor.accountAddress.length - 10
                                )}`}
                            </p>
                            <ul className="flex justify-start gap-5">
                                {Object.keys(
                                    network_typed[chainId].currencies
                                ).map((coin) => {
                                    const balance =
                                        contributor.balances[
                                            contributor.chainId
                                        ][coin as Currencies];
                                    return (
                                        <li
                                            className="flex items-center gap-1"
                                            key={coin}
                                        >
                                            <img
                                                src={
                                                    network_typed[chainId]
                                                        .currencies[
                                                        coin as Currencies
                                                    ].logo
                                                }
                                                className="h-5 w-5"
                                                alt={
                                                    network_typed[chainId]
                                                        .currencies[
                                                        coin as Currencies
                                                    ].name
                                                }
                                            />
                                            <span>
                                                {ethers.utils
                                                    .formatUnits(
                                                        balance
                                                            ? balance.toString()
                                                            : "0"
                                                    )
                                                    .toString()
                                                    .substring(0, 4)}
                                            </span>
                                        </li>
                                    );
                                })}
                            </ul>
                        </div>
                    </div>
                ) : (
                    <div className="group absolute top-5 flex justify-center gap-5 py-3">
                        <ul className="flex items-center justify-center gap-5">
                            <li
                                className="cursor-pointer hover:scale-110"
                                onClick={async () => {
                                    const _signer = await connect(
                                        handleUpdateSigner
                                    );
                                    handleUpdateSigner(_signer);
                                }}
                            >
                                <img
                                    src="/metamask.svg"
                                    className="h-8 w-8"
                                    alt=""
                                />
                            </li>
                            <li className="cursor-pointer hover:scale-110">
                                <img src="/ud.svg" className="h-8 w-8" alt="" />
                            </li>
                        </ul>
                    </div>
                )}

                <span className="font-cursive text-4xl tracking-wider">
                    buy me a crypto&nbsp;
                    <span
                        className={`${
                            count % 3 == 0
                                ? "text-amber-700"
                                : count % 3 == 1
                                ? "text-violet-700"
                                : "text-green-600"
                        } font-medium`}
                    >
                        {text}_
                    </span>
                </span>
                <div className="w-full">
                    <div className="relative">
                        <input
                            className="w-full rounded border-2 border-gray-200 py-3 pl-3 pr-12 text-sm"
                            id="search"
                            type="text"
                            value={search}
                            placeholder="search creators by wallet address or unstoppable domain"
                            autoComplete="off"
                            onChange={async (e) => {
                                setSearch(e.target.value);
                                if (e.target.value.length > 3) {
                                    if (!e.target.value.startsWith("0x")) {
                                        !searchUD && setSearchUD(true);
                                        try {
                                            const res = await fetch(
                                                "api/ud/resolve-domain",
                                                {
                                                    method: "POST",
                                                    headers: {
                                                        "Content-Type":
                                                            "application/json",
                                                    },
                                                    body: JSON.stringify({
                                                        domain: e.target.value,
                                                    }),
                                                }
                                            );
                                            const result: UDResponseResolved =
                                                await res.json();
                                            setUDDomainResolvedResult(result);
                                            setSearchValid(true);
                                        } catch (error) {
                                            setUDDomainResolvedResult(null);
                                            setSearchValid(false);
                                        }
                                    } else if (
                                        e.target.value.startsWith("0x")
                                    ) {
                                        searchUD && setSearchUD(false);
                                        if (
                                            ethers.utils.isAddress(
                                                e.target.value
                                            )
                                        ) {
                                            setSearchValid(true);
                                        } else {
                                            setSearchValid(false);
                                        }
                                    } else {
                                        setSearchValid(false);
                                    }
                                }
                            }}
                        />
                        {search && (
                            <span
                                className={`pointer-events-none absolute top-1/2 right-4 -translate-y-1/2 font-mono ${
                                    searchValid
                                        ? "font-bold text-green-600"
                                        : "text-gray-400 "
                                }`}
                            >
                                {search.length > 3 &&
                                    (searchUD ? "UD" : "0xETH_ADDR")}
                            </span>
                        )}
                    </div>

                    <button
                        className="group relative mt-5 inline-flex w-full items-center overflow-hidden rounded bg-indigo-600 px-8 py-3 text-white focus:outline-none focus:ring active:bg-indigo-500 disabled:bg-gray-400/70"
                        onClick={async () => {
                            const _creator: Creator = UDDomainResolvedResult
                                ? {
                                      wallet: UDDomainResolvedResult.owner,
                                      ud: UDDomainResolvedResult.domain,
                                  }
                                : {
                                      wallet: search,
                                  };
                            console.log(_creator);
                            setLoading(true);
                            await router.push(`/`, {
                                query: {
                                    coffee: 0,
                                    plant: 1,
                                    book: 0,
                                    creator: JSON.stringify(_creator),
                                },
                            });
                            router.reload();
                        }}
                        disabled={!searchValid}
                    >
                        <span className="absolute right-0 translate-x-full transition-transform group-hover:-translate-x-4">
                            <svg
                                className="h-5 w-5"
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    strokeLinecap="round"
                                    strokeWidth="2"
                                    d="M17 8l4 4m0 0l-4 4m4-4H3"
                                />
                            </svg>
                        </span>

                        <span className="font-semibold transition-all group-hover:mr-4">
                            Search creator
                        </span>
                    </button>
                </div>
            </div>
            <div className="h-full rounded-2xl bg-slate-50/50 py-20 lg:col-span-2">
                {loading ? (
                    <div className="flex h-full w-full items-center justify-center gap-1 text-6xl">
                        <span className="animate-bounce-medium">.</span>
                        <span className="animate-bounce-fast">.</span>
                        <span className="animate-bounce-slow">.</span>
                    </div>
                ) : (
                    <div className="grid h-full grid-cols-4 gap-10">
                        <div className="group col-span-2 flex flex-col items-center justify-center gap-3 pl-20">
                            <img
                                src={
                                    creator.profile
                                        ? creator.profile
                                        : makeBlockie(creator.wallet)
                                }
                                alt="profile"
                                className="mx-auto h-40 w-40 rounded-xl object-cover"
                            />

                            <blockquote className="flex flex-col justify-between px-10 text-center">
                                {creator.ud && (
                                    <p className="text-lg font-semibold">
                                        {creator.ud}
                                    </p>
                                )}
                                <p className="mt-1 font-mono text-sm font-medium">
                                    {creator.wallet}
                                </p>
                                <ul className="mt-3 flex justify-center gap-3">
                                    {creator.github && (
                                        <li className="cursor-pointer hover:animate-pulse">
                                            <Link href={creator.github}>
                                                <img
                                                    src={"/github.svg"}
                                                    alt={"github"}
                                                    width={25}
                                                    height={25}
                                                />
                                            </Link>
                                        </li>
                                    )}
                                    {creator.twitter && (
                                        <li className="cursor-pointer hover:animate-pulse">
                                            <Link href={creator.twitter}>
                                                <img
                                                    src={"/twitter.svg"}
                                                    alt={"twitter"}
                                                    width={30}
                                                    height={30}
                                                />
                                            </Link>
                                        </li>
                                    )}
                                    {creator.mail && (
                                        <li className="cursor-pointer hover:animate-pulse">
                                            <Link
                                                href={`mailto:${creator.mail}`}
                                            >
                                                <img
                                                    src={"/gmail.svg"}
                                                    alt={"gmail"}
                                                    width={25}
                                                    height={25}
                                                />
                                            </Link>
                                        </li>
                                    )}
                                </ul>
                                {creator.about && (
                                    <p className="mt-6 flex max-w-sm gap-1 text-gray-700">
                                        <span className="transform text-5xl opacity-0 transition-transform delay-200 group-hover:-translate-y-2 group-hover:opacity-100">
                                            “
                                        </span>
                                        <span className="text-center text-sm italic">
                                            {creator.about}
                                        </span>
                                        <span className="transform self-end text-5xl opacity-0 transition-transform delay-200 group-hover:translate-y-2 group-hover:opacity-100">
                                            ”
                                        </span>
                                    </p>
                                )}
                            </blockquote>
                        </div>
                        <div className="col-span-2 flex items-center justify-center pr-20">
                            <div className="flex w-full flex-col items-center justify-center gap-y-10 px-10">
                                <div className="w-full">
                                    <ul className="flex flex-col justify-center gap-3">
                                        <li className="flex items-center justify-between gap-8">
                                            <div className="h-10 w-10 rounded-full">
                                                <img
                                                    src="/coffee.png"
                                                    alt="coffee"
                                                />
                                            </div>
                                            <img
                                                src="/cross.png"
                                                className="h-4 w-4 text-gray-400"
                                            />
                                            <div className="relative">
                                                <input
                                                    className="w-full rounded border-2 border-gray-200 py-3 pl-3 pr-12 text-sm"
                                                    id="coffee"
                                                    type="text"
                                                    value={coffee}
                                                    onChange={() => {}}
                                                    onKeyDown={(e) => {
                                                        const rx = new RegExp(
                                                            /\d/
                                                        );
                                                        if (rx.test(e.key)) {
                                                            setCoffee((state) =>
                                                                Number(
                                                                    state +
                                                                        e.key
                                                                ).toString()
                                                            );
                                                        } else if (
                                                            e.key == "Backspace"
                                                        ) {
                                                            setCoffee((state) =>
                                                                Number(
                                                                    state.substring(
                                                                        0,
                                                                        state.length -
                                                                            1
                                                                    )
                                                                ).toString()
                                                            );
                                                        }
                                                    }}
                                                    placeholder="coffees"
                                                    min="0"
                                                    step="1"
                                                />
                                                <span className="pointer-events-none absolute top-1/2 right-4 -translate-y-1/2 text-sm text-gray-500">
                                                    $&nbsp;{Number(coffee) * 5}
                                                </span>
                                            </div>
                                        </li>
                                        <li className="flex items-center justify-between gap-8">
                                            <div className="h-10 w-10 rounded-full">
                                                <img
                                                    src="/plant.png"
                                                    alt="plant"
                                                />
                                            </div>
                                            <img
                                                src="/cross.png"
                                                className="h-4 w-4 text-gray-400"
                                            />
                                            <div className="relative">
                                                <input
                                                    className="w-full rounded border-2 border-gray-200 py-3 pl-3 pr-12 text-sm"
                                                    id="plant"
                                                    type="text"
                                                    value={plant}
                                                    onChange={() => {}}
                                                    onKeyDown={(e) => {
                                                        const rx = new RegExp(
                                                            /\d/
                                                        );
                                                        if (rx.test(e.key)) {
                                                            setPlant((state) =>
                                                                Number(
                                                                    state +
                                                                        e.key
                                                                ).toString()
                                                            );
                                                        } else if (
                                                            e.key == "Backspace"
                                                        ) {
                                                            setPlant((state) =>
                                                                Number(
                                                                    state.substring(
                                                                        0,
                                                                        state.length -
                                                                            1
                                                                    )
                                                                ).toString()
                                                            );
                                                        }
                                                    }}
                                                    placeholder="plants"
                                                    min="0"
                                                    step="1"
                                                />

                                                <span className="pointer-events-none absolute top-1/2 right-4 -translate-y-1/2 text-sm text-gray-500">
                                                    $&nbsp;{Number(plant) * 10}
                                                </span>
                                            </div>
                                        </li>
                                        <li className="ml-2 flex items-center justify-between gap-8">
                                            <div className="h-8 w-8 rounded-full">
                                                <img
                                                    src="/book.png"
                                                    alt="book"
                                                />
                                            </div>
                                            <img
                                                src="/cross.png"
                                                className="h-4 w-4 text-gray-400"
                                            />
                                            <div className="relative">
                                                <input
                                                    className="w-full rounded border-2 border-gray-200 py-3 pl-3 pr-12 text-sm"
                                                    id="book"
                                                    type="text"
                                                    value={book}
                                                    onChange={() => {}}
                                                    onKeyDown={(e) => {
                                                        const rx = new RegExp(
                                                            /\d/
                                                        );
                                                        if (rx.test(e.key)) {
                                                            setBook((state) =>
                                                                Number(
                                                                    state +
                                                                        e.key
                                                                ).toString()
                                                            );
                                                        } else if (
                                                            e.key == "Backspace"
                                                        ) {
                                                            setBook((state) =>
                                                                Number(
                                                                    state.substring(
                                                                        0,
                                                                        state.length -
                                                                            1
                                                                    )
                                                                ).toString()
                                                            );
                                                        }
                                                    }}
                                                    placeholder="books"
                                                    min="0"
                                                    step="1"
                                                />

                                                <span className="pointer-events-none absolute top-1/2 right-4 -translate-y-1/2 text-sm text-gray-500">
                                                    $&nbsp;{Number(book) * 15}
                                                </span>
                                            </div>
                                        </li>
                                        <li className="ml-2 flex items-center justify-end gap-8">
                                            <div className="hidden h-8 w-8 rounded-full">
                                                <img
                                                    src="/book.png"
                                                    alt="book"
                                                />
                                            </div>
                                            <img
                                                src="/cross.png"
                                                className="hidden h-4 w-4 text-gray-400"
                                            />
                                            <div className="relative">
                                                <input
                                                    className="w-full rounded bg-gray-100 py-3 pl-3 pr-12 text-sm"
                                                    id="total"
                                                    aria-readonly
                                                    type="text"
                                                    value={
                                                        Number(coffee) +
                                                        Number(plant) +
                                                        Number(book)
                                                    }
                                                    readOnly
                                                    placeholder="nil"
                                                    min="0"
                                                    step="1"
                                                />

                                                <span className="pointer-events-none absolute top-1/2 right-4 -translate-y-1/2 text-sm text-gray-500">
                                                    =&nbsp;&nbsp;$&nbsp;
                                                    {Number(coffee) * 5 +
                                                        Number(plant) * 10 +
                                                        Number(book) * 15}
                                                </span>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                                <div className="flex w-full flex-col justify-center gap-5">
                                    <ul className="flex border-b border-gray-100">
                                        <li className="flex-1">
                                            <div
                                                className="relative block p-4"
                                                onClick={() =>
                                                    setContinuousPayment(false)
                                                }
                                            >
                                                {!continuousPayment && (
                                                    <span className="absolute inset-x-0 -bottom-px h-px w-full bg-gray-400"></span>
                                                )}

                                                <div className="flex cursor-pointer items-center justify-center">
                                                    <span
                                                        className={`ml-3 ${
                                                            !continuousPayment &&
                                                            "font-medium"
                                                        } text-gray-900`}
                                                    >
                                                        One time support
                                                    </span>
                                                </div>
                                            </div>
                                        </li>

                                        <li className="flex-1">
                                            <div
                                                className="relative block p-4"
                                                onClick={() =>
                                                    setContinuousPayment(true)
                                                }
                                            >
                                                {continuousPayment && (
                                                    <span className="absolute inset-x-0 -bottom-px h-px w-full bg-gray-400"></span>
                                                )}
                                                <div className="flex cursor-pointer items-center justify-center">
                                                    <span
                                                        className={`ml-3 ${
                                                            continuousPayment &&
                                                            "font-medium"
                                                        } text-gray-900`}
                                                    >
                                                        Continuous support
                                                    </span>
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                    {continuousPayment ? (
                                        <>
                                            <div className="mt-5 flex items-center justify-between gap-8">
                                                <span className="font-semibold">
                                                    Pay in
                                                </span>
                                                <ul className="flex items-center justify-center gap-5">
                                                    {Object.keys(
                                                        network_typed[chainId]
                                                            .currencies
                                                    ).map((coin) => {
                                                        return (
                                                            <li
                                                                key={coin}
                                                                className={`h-10 w-10 cursor-pointer rounded-full transition-transform duration-200 ease-in-out ${
                                                                    payIn ==
                                                                        coin &&
                                                                    "scale-150 shadow-xl"
                                                                }`}
                                                                onClick={() =>
                                                                    setPayIn(
                                                                        coin as Currencies
                                                                    )
                                                                }
                                                            >
                                                                <img
                                                                    src={
                                                                        network_typed[
                                                                            chainId
                                                                        ]
                                                                            .currencies[
                                                                            coin as Currencies
                                                                        ].logo
                                                                    }
                                                                    alt={
                                                                        network_typed[
                                                                            chainId
                                                                        ]
                                                                            .currencies[
                                                                            coin as Currencies
                                                                        ].name
                                                                    }
                                                                />
                                                            </li>
                                                        );
                                                    })}
                                                </ul>
                                            </div>
                                            <div className="mt-5 flex flex-col items-center justify-center">
                                                <div className="w-full">
                                                    <p className="flex items-center justify-between gap-10 text-sm">
                                                        <span>{`${network_typed[chainId].currencies[payIn].symbol}x/USD`}</span>
                                                        <span className="font-semibold">
                                                            {0.56}
                                                        </span>
                                                    </p>
                                                    <p className="flex items-center justify-between gap-10 text-sm">
                                                        <span>
                                                            {`Amount to be paid in USD`}
                                                        </span>
                                                        <span className="font-semibold">
                                                            {Number(coffee) *
                                                                5 +
                                                                Number(plant) *
                                                                    10 +
                                                                Number(book) *
                                                                    15}
                                                        </span>
                                                    </p>
                                                    <p className="flex items-center justify-between gap-10 text-sm">
                                                        <span>{`Amount to be paid in ${network_typed[chainId].currencies[payIn].symbol}x/month`}</span>
                                                        <span className="font-semibold">
                                                            {(
                                                                (Number(
                                                                    coffee
                                                                ) *
                                                                    5 +
                                                                    Number(
                                                                        plant
                                                                    ) *
                                                                        10 +
                                                                    Number(
                                                                        book
                                                                    ) *
                                                                        15) /
                                                                0.56
                                                            ).toFixed(3)}
                                                        </span>
                                                    </p>
                                                    <p className="flex items-center justify-between gap-10 text-sm">
                                                        <span>{`Your ${network_typed[chainId].currencies[payIn].symbol}x balance`}</span>
                                                        <span className="font-semibold">
                                                            {contributor
                                                                ? ethers.utils
                                                                      .formatUnits(
                                                                          ethers.BigNumber.from(
                                                                              contributor
                                                                                  .balances[
                                                                                  chainId
                                                                              ][
                                                                                  payIn
                                                                              ]
                                                                                  ? contributor
                                                                                        .balances[
                                                                                        chainId
                                                                                    ][
                                                                                        payIn
                                                                                    ]
                                                                                  : "0"
                                                                          )
                                                                      )
                                                                      .substring(
                                                                          0,
                                                                          6
                                                                      )
                                                                : "nil"}
                                                        </span>
                                                    </p>
                                                </div>
                                                <button className="group relative mt-5 inline-flex w-full items-center overflow-hidden rounded bg-green-600 px-8 py-3 text-white focus:outline-none focus:ring active:bg-green-500">
                                                    <span className="absolute right-0 translate-x-full transition-transform group-hover:-translate-x-4">
                                                        <svg
                                                            className="h-5 w-5"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                            fill="none"
                                                            viewBox="0 0 24 24"
                                                            stroke="currentColor"
                                                        >
                                                            <path
                                                                strokeLinecap="round"
                                                                strokeWidth="2"
                                                                d="M17 8l4 4m0 0l-4 4m4-4H3"
                                                            />
                                                        </svg>
                                                    </span>

                                                    <span className="font-semibold transition-all group-hover:mr-4">
                                                        Start streaming
                                                    </span>
                                                </button>
                                            </div>
                                        </>
                                    ) : (
                                        <>
                                            <div className="mt-5 flex items-center justify-between gap-8">
                                                <span className="font-semibold">
                                                    Pay in
                                                </span>
                                                <ul className="flex items-center justify-center gap-5">
                                                    {Object.keys(
                                                        network_typed[chainId]
                                                            .currencies
                                                    ).map((coin) => {
                                                        return (
                                                            <li
                                                                key={coin}
                                                                className={`h-10 w-10 cursor-pointer rounded-full transition-transform duration-200 ease-in-out ${
                                                                    payIn ==
                                                                        coin &&
                                                                    "scale-150 shadow-xl"
                                                                }`}
                                                                onClick={() =>
                                                                    setPayIn(
                                                                        coin as Currencies
                                                                    )
                                                                }
                                                            >
                                                                <img
                                                                    src={
                                                                        network_typed[
                                                                            chainId
                                                                        ]
                                                                            .currencies[
                                                                            coin as Currencies
                                                                        ].logo
                                                                    }
                                                                    alt={
                                                                        network_typed[
                                                                            chainId
                                                                        ]
                                                                            .currencies[
                                                                            coin as Currencies
                                                                        ].name
                                                                    }
                                                                />
                                                            </li>
                                                        );
                                                    })}
                                                </ul>
                                            </div>
                                            <div className="mt-5 flex flex-col items-center justify-center">
                                                <div className="w-full">
                                                    <p className="flex items-center justify-between gap-10 text-sm">
                                                        <span>{`${network_typed[chainId].currencies[payIn].symbol}/USD`}</span>
                                                        <span className="font-semibold">
                                                            {0.56}
                                                        </span>
                                                    </p>
                                                    <p className="flex items-center justify-between gap-10 text-sm">
                                                        <span>
                                                            {`Amount to be paid in USD`}
                                                        </span>
                                                        <span className="font-semibold">
                                                            {Number(coffee) *
                                                                5 +
                                                                Number(plant) *
                                                                    10 +
                                                                Number(book) *
                                                                    15}
                                                        </span>
                                                    </p>
                                                    <p className="flex items-center justify-between gap-10 text-sm">
                                                        <span>{`Amount to be paid in ${network_typed[chainId].currencies[payIn].symbol}`}</span>
                                                        <span className="font-semibold">
                                                            {(
                                                                (Number(
                                                                    coffee
                                                                ) *
                                                                    5 +
                                                                    Number(
                                                                        plant
                                                                    ) *
                                                                        10 +
                                                                    Number(
                                                                        book
                                                                    ) *
                                                                        15) /
                                                                0.56
                                                            ).toFixed(3)}
                                                        </span>
                                                    </p>
                                                    <p className="flex items-center justify-between gap-10 text-sm">
                                                        <span>{`Your ${network_typed[chainId].currencies[payIn].symbol} balance`}</span>
                                                        <span className="font-semibold">
                                                            {contributor
                                                                ? ethers.utils
                                                                      .formatUnits(
                                                                          ethers.BigNumber.from(
                                                                              contributor
                                                                                  .balances[
                                                                                  chainId
                                                                              ][
                                                                                  payIn
                                                                              ]
                                                                                  ? contributor
                                                                                        .balances[
                                                                                        chainId
                                                                                    ][
                                                                                        payIn
                                                                                    ]
                                                                                  : "0"
                                                                          )
                                                                      )
                                                                      .substring(
                                                                          0,
                                                                          6
                                                                      )
                                                                : "nil"}
                                                        </span>
                                                    </p>
                                                </div>
                                                <button className="group relative mt-5 inline-flex w-full items-center overflow-hidden rounded bg-green-600 px-8 py-3 text-white focus:outline-none focus:ring active:bg-green-500">
                                                    <span className="absolute right-0 translate-x-full transition-transform group-hover:-translate-x-4">
                                                        <svg
                                                            className="h-5 w-5"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                            fill="none"
                                                            viewBox="0 0 24 24"
                                                            stroke="currentColor"
                                                        >
                                                            <path
                                                                strokeLinecap="round"
                                                                strokeWidth="2"
                                                                d="M17 8l4 4m0 0l-4 4m4-4H3"
                                                            />
                                                        </svg>
                                                    </span>

                                                    <span className="font-semibold transition-all group-hover:mr-4">
                                                        Send
                                                    </span>
                                                </button>
                                            </div>
                                        </>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default Home;
